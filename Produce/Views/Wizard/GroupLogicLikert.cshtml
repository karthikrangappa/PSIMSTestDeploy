@using Intelledox.Produce
@model Intelledox.ViewModel.Core.QuestionViewModel<Intelledox.QAWizard.GroupLogicQuestion>

@{ 
    Layout = "~/Views/Shared/_QuestionLayout.cshtml";

    var qid = Html.IdFor(Model.Question);
    var isDisabled = !Model.Question.IsEditable;
    var onClick = "$('#" + qid + "_change').val('1');";

    if (Model.Question.IsRealtimeParentQuestion)
    {
        onClick += "wiz.reload();";
    }

    List<Intelledox.QAWizard.Answer> activeAnswers = Model.Question.ActiveAnswers();
}
<div>
    <input type="hidden" id="@(qid)_change" name="@(qid)_change" value="0" />
    <div class="likert">
        <div class="likert-line"><div /></div>
        <div>
            @foreach (Intelledox.QAWizard.Answer a in activeAnswers)
            {
                var aid = Html.IdFor(a);

                <div class="likert-section">
                    <div class="cover">&nbsp;</div>
                    <label>
                        <input type="radio" id="@aid" name="@qid" disabled="@isDisabled" value="@a.ID" checked="@a.Selected" onclick="@Html.Raw(onClick)" aria-describedby="@(qid)Text" @Html.Raw(Model.Question.IsMandatory ? "required" : "") @if (Model.LogInteractions) { <text>data-analyticsid="@(a.AnalyticsID())"</text> }/><br />
                        @Html.Raw(HtmlParsing.Sanitize(((Intelledox.QAWizard.GroupLogicAnswer)a).DisplayTextFormatted))
                    </label>
                </div>
            }
        </div>
    </div>
</div>
@Html.DisplayValidation(Model.Question.LastValidationMessage, Html.IdFor(activeAnswers[0]))