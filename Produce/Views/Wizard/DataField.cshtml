@using Intelledox.Produce
@model Intelledox.Produce.DataFieldViewModel
@{ 
    if (Model.ShowQuestionTemplate)
    {
        Layout = "~/Views/Shared/_QuestionLayout.cshtml";
    }
    else
    {
        Layout = null;
    }   
    var qid = Html.IdFor(Model.Question);
}
@if (Model.ShowUpload)
{
    @:<div>
        if (Model.Question.IsEditable)
        {
        <a href="#void" onclick="@Html.Raw(Model.LogInteractions ? "wiz.dataAnalyticsFocusAndBlur(" + @Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ",'dataUpload'" + ");" : "")wiz.openUploadPage('@Url.Content("~/")', '@Model.Question.WizardFragment.InstanceId.ToString()', '@Model.Question.QuestionGuid.ToString()', 'data', '@Model.RepeatPath', '@Model.Question.WizardFragment.WizardSession.ProjectLog.ToString()', null);return false;">@Resources.Strings.SelectDataFile</a>
        }
        else
        {
        @Resources.Strings.NoDataFileSelected
        }
    @:</div>
}
@if (Model.ShowClear && Model.Question.IsEditable)
{
<a href="#void" onclick="@Html.Raw(Model.LogInteractions ? "wiz.dataAnalyticsFocusAndBlur(" + @Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ",'dataClear'" + ");" : "")wiz.clearContent('@Model.Question.WizardFragment.InstanceId.ToString()', '@Model.Question.QuestionGuid.ToString()', '@Model.RepeatPath');return false;">@Resources.Strings.ClearFile</a><br />
}
@if (Model.ShowUpload)
{ 
    @Html.DisplayValidation(Model.Question.LastValidationMessage)
}
else
{
    <table class="NoPadding NoSpacing NoBorder" width="100%" role="presentation">
    @if (Model.Filters.Count > 0)
    { 
        <tr>
            <td class="filter">
                <table role="presentation">
                @foreach (var filter in Model.Filters)
                { 
                    var keyFieldName = qid + "_KeyField_" + filter.Id;
            
                    <tr>
                        <td class="filterTitle"><label for="@keyFieldName">@filter.Title</label></td>
                        <td>
                            <input class="form-control" id="@keyFieldName" name="@keyFieldName" value="@filter.Value" 
                            onfocus="wiz.setDefaultButton('@(qid)_btnFetchData');" onblur="wiz.setDefaultButton(undefined);" 
                                @Html.Raw(Model.IsInPopupWindow() ? "onkeypress=\"if( event.keyCode == 13 ) { fetchData" + qid + "(); return false;}\"" : "")
                                @Html.Raw(!Model.Question.IsEditable ? "disabled=\"disabled\"" : "" ) 
                                @if (Model.LogInteractions) { <text>data-analyticsid="@Model.AnalyticsID"</text> }>
                        </td>
                    </tr>
                }
                </table>
            </td>
        </tr>
    }
    <tr>
        <td class="cell-search" style="text-align:center">
            @if (Model.Filters.Count > 0 && Model.Question.IsEditable)
            {
                <div><input type="button" class="btn btn-default" value="@Resources.Strings.FetchData" id="@(qid)_btnFetchData" onclick="fetchData@(qid)()" @Html.Raw(Model.Question.HasValidationErrors() ? "aria-invalid=\"true\" aria-describedby=\"error_" + qid + "_iFetchData\"" : "") @if (Model.LogInteractions) { <text>data-analyticsid="@(Model.AnalyticsID)" data-analyticsevent="fetchData"</text> }/></div>
            }
            @Html.DisplayValidation(Model.Question.LastValidationMessage, qid + "_iFetchData")
            <input type="hidden" id="@(qid)_hidSelectedIndex" name="@(qid)_hidSelectedIndex" value="@Model.SelectedIndex" />
        </td>
    </tr>
    <tr id="@(qid)_trFetchData" @Html.Raw(Model.Filters.Count > 0 ? "style=\"display:none\"" : "")>
        <td>
            <div class="dataFrameContainer">
                <div id="@(qid)_results" class="dataFrame"></div>
            </div>
        </td>
    </tr>
    </table>
    <script type="text/javascript">
        function fetchData@(qid)() {
            var queryUrl = '@Url.Content("~/")data/search/?fragmentGuid=@(Model.Question.WizardFragment.InstanceId.ToString())' +
                            '&QuestionGuid=@(Model.Question.QuestionGuid.ToString())' +
                            '&RepeatPath=@(Model.RepeatPath)' +
                            '&Data=@(qid)_hidSelectedIndex' +
                            '&SelectedIndex=' + document.getElementById('@(qid)_hidSelectedIndex').value +
                            '&logGuid=@Model.Question.WizardFragment.WizardSession.ProjectLog.ToString()';

            @foreach (var filter in Model.Filters)
            {
                // apply display filter fields
                @:queryUrl += '&KeyField_@(filter.Id)=' + encodeURIComponent(document.getElementById('@(qid)_KeyField_@(filter.Id)').value);
            }

            $.ajaxSetup({
                cache: false
            });
            $.get(queryUrl,
                function (data) {
                    $("#@(qid)_results").html(data);
                });
            
            document.getElementById('@(qid)_trFetchData').style.display='';
        }
        @if (Model.Filters.Count == 0 || !Model.Question.IsEditable)
        {
            @:fetchData@(qid)();
        }
    </script>
}
