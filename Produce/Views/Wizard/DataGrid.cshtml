@using Intelledox.Produce
@model Intelledox.Produce.DataGridViewModel
@{
    if (Model.ShowQuestionTemplate)
    {
        Layout = "~/Views/Shared/_QuestionLayout.cshtml";
    }
    else
    {
        Layout = null;
    }
    var qid = Html.IdFor(Model.Question);
    var selectedIndex = Model.SelectedIndex;
}

<input type="hidden" id="@(qid)_hidSelectedIndex" name="@(qid)_hidSelectedIndex" value="@selectedIndex" />

<div id="@(qid)_gridResults" class="row datagrid-table">
    <table id="grdData_@(qid)" class="table table-bordered display dt-responsive" width="100%" cellspacing="0" data-SelectionField="@(qid)_hidSelectedIndex">
        <thead>
            <tr role="row"></tr>
        </thead>
        <tr>
            <td><div id="ixLoading@(qid)" class="wait-datagrid" title="@Resources.Strings.Loading" aria-label="@Resources.Strings.Loading"></div><br /></td>
        </tr>
    </table>
</div>

@Html.DisplayValidation(Model.Question.LastValidationMessage, qid)

<script type="text/javascript">
    function fetchData@(qid)() {
        var queryUrl = '@Url.Content("~/")data/grid/?fragmentGuid=@(Model.Question.WizardFragment.InstanceId.ToString())' +
                        '&QuestionGuid=@(Model.Question.QuestionGuid.ToString())' +
                        '&RepeatPath=@(Model.RepeatPath)' +
                        '&logGuid=@Model.Question.WizardFragment.WizardSession.ProjectLog.ToString()';

        $.ajaxSetup({
            cache: false
        });
        $.get(queryUrl + '&resetData=false',
            function (data) {

                if (data.error != null || data.columns.length === 0) {
                    $('#@(qid)_gridResults').append(data.error);
                    $('#grdData_@(qid)').hide();
                    return;
                }

                var logInteractions = @Json.Encode(Model.LogInteractions);
                var isMultiple = @Json.Encode(Model.IsMultipleSelect);
                var thead = $('#grdData_@(qid) thead tr');
                var groupingIndex = -1;

                for (var colIndex = 0; colIndex < data.columns.length; colIndex++) {
                    if (data.columns[colIndex].name === '@Html.Raw(HttpUtility.JavaScriptStringEncode(@Model.Question.DatasourceQuestionModel.GroupingField))') {
                        groupingIndex = colIndex;
                    }
                    var header = '<th class="' + (data.columns[colIndex].nosort ? "no-sort" : "") + ' ' + (logInteractions ? '@(qid)_focussortclick' : '') + '" ' + (logInteractions ? 'data-analyticsid="' + "@(Model.AnalyticsID)" + "\" data-analyticsevent=\"dataGridSort " + data.columns[colIndex].displayname + "\"" : "") + '>' + data.columns[colIndex].displayname + '</th>';
                    thead.append(header);
                }

                var t = $('#grdData_@(qid)').DataTable({
                    data: data.data,
                    order: [],
                    columnDefs: (groupingIndex > -1 ? [{ targets: 'no-sort', orderable: false }, { 'visible': false, 'targets': groupingIndex }] : [{ targets: 'no-sort', orderable: false }]),
                    rowGroup: (groupingIndex > -1 ? { dataSrc: groupingIndex } : undefined),
                    lengthChange: false,
                    autoWidth: false,
                    language: {
                        search: "_INPUT_",
                        searchPlaceholder: '@Html.Raw(HttpUtility.JavaScriptStringEncode(Resources.Strings.Search))',
                        zeroRecords: '@Html.Raw(HttpUtility.JavaScriptStringEncode(Resources.Strings.ZeroRecords))',
                        infoEmpty: '@Html.Raw(HttpUtility.JavaScriptStringEncode(Resources.Strings.InfoEmpty))',
                        infoFiltered: '@Html.Raw(HttpUtility.JavaScriptStringEncode(String.Format(Resources.Strings.InfoFiltered, "_MAX_")))',
                    },
                    @if (Model.Editable)
                    {
                        @:select: { style: "@(Model.IsMultipleSelect ? "multi" : "single")", info: false },
                    }
                    else
                    {
                        @:select: false,
                    }
                    searching: @Json.Encode(Model.Question.DatasourceQuestionModel.SearchAll),
                    pageLength: @Model.Question.DatasourceQuestionModel.ResultsPerPage,
                    stateSave: true,
                    stateDuration: -1, //Use session storage
                    stateSaveCallback: function (settings, data) {
                        localStorage.setItem("#@(qid)_gridResults" + $('#hidLogGuid').val(), JSON.stringify(data));
                    },
                    stateLoadCallback: function () {
                        try {
                            return JSON.parse(localStorage.getItem("#@(qid)_gridResults" + $('#hidLogGuid').val()));
                        } catch (e) { }
                    },
                    responsive: true,
                    "fnDrawCallback": function (oSettings) {
                        if (oSettings._iDisplayLength > oSettings.fnRecordsDisplay()) {
                            $(oSettings.nTableWrapper).find('#grdData_@(qid)_paginate').hide();
                        } else {
                            $(oSettings.nTableWrapper).find('#grdData_@(qid)_paginate').show();
                        }
                        if (logInteractions) {
                            $('#grdData_@(qid)_paginate .paginate_button').each(function () {
                                $(this).bind('click', function (e) {
                                    var focusNode = "@(Model.AnalyticsID)";
                                    var eventNode = "dataGridPage " + $(this).find('a').text();
                                    wiz.dataAnalyticsFocusAndBlur(focusNode, eventNode);
                                });
                            });
                        }
                    },
                    "infoCallback": function (settings, start, end, max, total, pre) {
                        var api = this.api();
                        var pageInfo = api.page.info();
                        if (pageInfo.pages <= 1) {
                            return '';
                        }
                        var output = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Resources.Strings.ShowPageOfPage))';
                        return output.replace('{0}', (pageInfo.page + 1)).replace('{1}', pageInfo.pages);
                    },
                    "initComplete": function (settings, json) {
                        if (logInteractions) {
                            if (@Json.Encode(Model.Question.DatasourceQuestionModel.SearchAll)){
                                $('#grdData_@(qid)_filter input').addClass("@(qid)_focussearch").attr('data-analyticsid', '@(Model.AnalyticsID)').attr('data-analyticsevent', 'dataGridSearch');
                                $(".@(qid)_focussearch").focus(function () {
                                    var focusNode = $(this).data('analyticsid');
                                    var eventNode = $(this).data('analyticsevent');
                                    wiz.dataAnalyticsFocus(focusNode, eventNode);
                                });
                                $(".@(qid)_focussearch").blur(function () {
                                    wiz.dataAnalyticsBlur();
                                });
                            }

                            $(".@(qid)_focussortclick").click(function () {
                                var focusNode = $(this).data('analyticsid');
                                var eventNode = $(this).data('analyticsevent');
                                wiz.dataAnalyticsFocusAndBlur(focusNode, eventNode);
                            });
                        }
                    }
                });

                @if (!string.IsNullOrEmpty(selectedIndex) && selectedIndex != Intelledox.Common.ConstantValues.NONEVALUE && selectedIndex != "-1")
                {
                    <text>
                    t.rows([@selectedIndex], { order: 'index' }).select();
                    </text>
                }

                $.fn.dataTable.ext.classes.sPaging = "@(qid)";

                //Responsive seems to only hide one column at a time. Recurse down until we fit.
                t.on('responsive-resize', function (e, datatable, columns) {
                    $("#grdData_@(qid)").DataTable().responsive.recalc();
                });

                $("#grdData_@(qid)").DataTable().responsive.recalc();

                t.on('select', function (e, dt, type, indexes) {
                    if (logInteractions) {
                        wiz.dataAnalyticsFocusAndBlur('@(Model.AnalyticsID)', "dataGridSelect " + indexes);
                    }

                    if ( type === 'row' ) {
                        if (isMultiple) {
                            selectionField = $('#' + $('#grdData_@(qid)').data('selectionfield'));

                            if (selectionField.val() == 'None' || selectionField.val() === '') {
                                // This is the first row to be selected - so remove the "None"
                                selectionField.val(indexes);
                            } else {
                                selectionField.val(selectionField.val() + "," + indexes);
                            }
                        }
                        else
                        {
                            selectionField = $('#' + $('#grdData_@(qid)').data('selectionfield'));
                            selectionField.val(indexes);
                        }
                    }
                } );
                t.on('deselect', function (e, dt, type, indexes) {
                    if (logInteractions) {
                        wiz.dataAnalyticsFocusAndBlur('@(Model.AnalyticsID)', "dataGridDeselect " + indexes);
                    }

                    if ( type === 'row' ) {
                        if (isMultiple) {
                            selectionField = $('#' + $('#grdData_@(qid)').data('selectionfield'));
                            var selectedIndices;
                            if (selectionField.val() === '') {
                                selectedIndices = [];
                            } else {
                                selectedIndices = selectionField.val().split(',');
                            }

                            if (indexes.length > 0) {
                                wiz.removeAt(selectedIndices, wiz.indexOf(selectedIndices, indexes[0].toString()));
                                selectionField.val(selectedIndices.join(','));
                            }
                        }
                    }
                });

                @if (Model.Question.DatasourceQuestionModel.LiveRefresh)
                {
                    <text>
                    wiz.intervals.push(setInterval(function () {
                        t.ajax.url(queryUrl + '&resetData=true');
                        t.ajax.reload(function () {
                            var indexValue = document.getElementById('@(qid)_hidSelectedIndex').value;

                            document.getElementById('@(qid)_hidSelectedIndex').value = '';

                            if (indexValue != '')
                            {
                                t.rows(indexValue.split(','), { order: 'index' }).select();
                            }
                        }, false);
                    }, @((Model.Question.DatasourceQuestionModel.RefreshPeriod * 1000).ToString())));
                    </text>
                }
            });

    }

    fetchData@(qid)();
</script>
