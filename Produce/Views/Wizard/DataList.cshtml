@using Intelledox.Produce
@model Intelledox.Produce.DataListViewModel
@{
    Layout = "~/Views/Shared/_QuestionLayout.cshtml";
    var qid = Html.IdFor(Model.Question);
    var isDisabled = !Model.Question.IsEditable;
    var attribs = new Dictionary<string, object>();

    attribs.Add("class", "form-control");
    if (Model.Question.IsRealtimeParentQuestion)
    {
        attribs.Add("onchange", "wiz.reload()");
    }
}
@if (Model.ShowUpload)
{
    if (Model.Question.IsEditable)
    {
        <a href="#void" onclick="@Html.Raw(Model.LogInteractions ? "wiz.dataAnalyticsFocusAndBlur(" + @Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ", 'dataUpload'" + ");" : "")wiz.openUploadPage('@Url.Content("~/")', '@Model.Question.WizardFragment.InstanceId.ToString()', '@Model.Question.QuestionGuid.ToString()', 'data', '@Model.RepeatPath', '@Model.Question.WizardFragment.WizardSession.ProjectLog.ToString()', null);return false;">@Resources.Strings.SelectDataFile</a>
    }
    else
    {
        <div>@Resources.Strings.NoDataFileSelected</div>
    }
}
@if (Model.ShowClear && Model.Question.IsEditable)
{
    <a href="#void" onclick="@Html.Raw(Model.LogInteractions ? "wiz.dataAnalyticsFocusAndBlur(" + @Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ", 'dataClear'" + ");" : "")wiz.clearContent('@Model.Question.WizardFragment.InstanceId.ToString()', '@Model.Question.QuestionGuid.ToString()', '@Model.RepeatPath');return false;">@Resources.Strings.ClearFile</a><br />
}
@if (Model.ShowUpload)
{
    @Html.DisplayValidation(Model.Question.LastValidationMessage)
}
else
{
    if (Model.IsSingleSelectDropdown)
    {
        if (!Model.Question.IsEditable)
        {
            attribs.Add("disabled", "disabled");
        }
        if (Model.Question.HasValidationErrors())
        {
            attribs.Add("aria-invalid", "true");
            attribs.Add("aria-describedby", "error_" + qid);
        }
        if (Model.Question.IsMandatory)
        {
            attribs.Add("required", "");
        }
        if (Model.LogInteractions)
        {
            attribs.Add("data-analyticsid", Html.Encode(Model.AnalyticsID));
        }

        @Html.DropDownList(qid, Model.SelectData, attribs)
        <input type="hidden" id="@(qid)_Original" value="@Model.Question.SelectedIndex" name="@(qid)_Original"/>
        @Html.DisplayValidation(Model.Question.LastValidationMessage, qid)
    }
    else if (Model.IsMultipleSelectDropdown)
    {
        <input type="hidden" id="@(qid)_pos" value="@(String.IsNullOrEmpty(Request.Form[qid + "_pos"]) ? "0" : Request.Form[qid + "_pos"])" />
        <input type="hidden" value="@String.Join(",", Model.Question.SelectedIndices)" name="@(qid)_OriginalList" />
        <input type="hidden" value="@Model.SelectData.Count" name="@(qid)_OriginalCount" />

        <!-- Split button -->
        <div class="btn-group btn-group-multiselect" id="@(qid)_MultiSelect">
            <button type="button" class="btn btn-default btn-multiselect" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">@Model.DisplayText</button>
            <button type="button" class="btn btn-default btn-multiselect dropdown-toggle dropdown-toggle-multiselect" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <span class="caret"></span>
                <span class="sr-only">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu">
                @for (int i = 0; i < Model.SelectData.Count; i++)
                {
                    <li>
                        <label class="multiselect-label" onclick="event.stopPropagation();">
                            <input type="checkbox" id="@(qid)_@(i)" name="@qid" disabled="@isDisabled" value="@Model.SelectData[i].Value" checked="@Model.SelectData[i].Selected" @if (Model.LogInteractions) { <text>data-analyticsid="@(Model.AnalyticsID)"</text> }/>
                            <span class="multiselect-text">@Model.SelectData[i].Text</span>
                        </label>
                    </li>
                }
            </ul>
        </div>
        @Html.DisplayValidation(Model.Question.LastValidationMessage, qid)
    }
    else
    {
        <div id="@(qid)_boxMultiple" class="multiDataListBox" @Html.Raw(Model.Question.IsRealtimeParentQuestion ? "onscroll=\"document.getElementById('" + qid + "_pos').value=this.scrollTop\"" : "")>
            <input type="hidden" id="@(qid)_pos" value="@(String.IsNullOrEmpty(Request.Form[qid + "_pos"]) ? "0" : Request.Form[qid + "_pos"])" />
            <input type="hidden" value="@String.Join(",", Model.Question.SelectedIndices)" name="@(qid)_OriginalList" />
            <input type="hidden" value="@Model.SelectData.Count" name="@(qid)_OriginalCount" />
            <script type="text/javascript">document.getElementById('@(qid)_boxMultiple').scrollTop = document.getElementById('@(qid)_pos').value;</script>
            @for (int i = 0; i < Model.SelectData.Count; i++)
            {
                <div class="checkbox">
                    <label>
                        <input type="checkbox" id="@(qid)_@(i)" name="@qid" disabled="@isDisabled" value="@Model.SelectData[i].Value" checked="@Model.SelectData[i].Selected" @Html.Raw(Model.Question.IsRealtimeParentQuestion ? "onclick=\"wiz.reload()\"" : "") @Html.Raw(Model.Question.IsMandatory ? "required" : "") @if (Model.LogInteractions) { <text>data-analyticsid="@(Model.AnalyticsID)"</text> }/>
                        @Model.SelectData[i].Text
                    </label>
                </div>
            }
        </div>
        @Html.DisplayValidation(Model.Question.LastValidationMessage, qid + "_boxMultiple")
    }
}
