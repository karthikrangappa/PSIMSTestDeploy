@using Intelledox.Produce
@model Intelledox.Produce.TabGroupViewModel
@{
    var index = -1;
    var objectId = Model.Tab.TabGroupModel.TabGroupGuid.ToString();
    var repeatPath = Model.RepeatPath;
    var fragmentGuid = Model.Tab.WizardFragment.InstanceId.ToString();
    var selectedIndex = Model.SelectedTabIndex; // Force initial selection
}
<div data-fragmentguid="@(fragmentGuid)" data-objectid="@(objectId)" data-repeatpath="@(repeatPath)" class="@(Model.Tab.TabGroupModel.CssStyle)">
    @foreach (Intelledox.QAWizard.TabPage tab in Model.Tab.TabPages)
    {
        index++;

        if (tab.IsVisible)
        {
            var changeTab = index;
            var buttonClass = "AccordionExpandButton";
            var buttonText = Resources.Strings.Expand;
            var divStyle = "accordion";
            var valid = true;
            if (Model.Tab.ActivePage == index)
            {
                changeTab = -1;
                buttonClass = "AccordionContractButton";
                buttonText = Resources.Strings.Contract;
                divStyle += " accordionExpanded";
            }

            if (Model.Tab.MaximumVisitedTabIndex > index || Model.Tab.WizardFragment.WizardSession.MaximumVisitedPageIndex > Model.Tab.WizardFragment.WizardSession.CurrentPageIndex)
            {
                if (tab.Validate(true))
                {
                    divStyle += " accordionValid";
                }
                else
                {
                    divStyle += " accordionInvalid";
                    valid = false;
                }
            }

            <div class="@divStyle @Html.Raw(Model.LogInteractions ? "analyticslog" : "")"
                 onclick="wiz.tabClick($(this), '@changeTab');@Html.Raw(Model.LogInteractions ? "wiz.dataAnalyticsFocusAndBlur(" +  @Microsoft.Security.Application.Encoder.JavaScriptEncode(String.IsNullOrWhiteSpace(tab.TabPageModel.Title) ? Resources.Strings.TabPage : tab.TabPageModel.Title) + ", 'tabSelectAccordion'" + ");" : "")return false;" >
                <span class="@buttonClass"><span class="sr-only">@buttonText</span></span>
                <a href="#void" id="@(Html.IdFor(Model.Tab) + "_" + index.ToString())">@Html.Raw(Microsoft.Security.Application.Encoder.HtmlEncode(String.IsNullOrWhiteSpace(tab.TabPageModel.Title) ? Resources.Strings.TabPage : tab.TabPageModel.Title))</a>

                @if (Model.Tab.MaximumVisitedTabIndex > index || Model.Tab.WizardFragment.WizardSession.MaximumVisitedPageIndex > Model.Tab.WizardFragment.WizardSession.CurrentPageIndex)
                {
                    if (valid)
                    {
                        <span class="ValidatedTab"><span class="sr-only">@Resources.Strings.Validated</span></span>
                    }
                    else
                    {
                        <span class="InvalidTab"><span class="sr-only">@Resources.Strings.Invalid</span></span>
                    }
                }

            </div>

            if (Model.Tab.ActivePage == index)
            {
                <div class="ExpandedAccordion">
                    @{Html.RenderNode(Model.Tab.TabPages[Model.Tab.ActivePage]);}
                </div>
                                }
                            }
                        }
</div>
