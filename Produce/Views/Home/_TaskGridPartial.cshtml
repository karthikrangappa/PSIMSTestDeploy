@using Intelledox.Produce
@model Intelledox.Produce.HomeViewModel


@if (Model.TaskListResults.Count > 0)
{
    <h2 class="titleProgress">
        @Resources.Strings.FormsAssignedToMe
        <img id="TaskListButton" src="" class="ExpandButton" alt="@Resources.Strings.Open/@Resources.Strings.Close" />
    </h2>

    var grid = new WebGrid(source: Model.TaskListResults, canPage: true, rowsPerPage: 20, fieldNamePrefix: "task");
    <div class="table-responsive" id="listProgress">
        @{
            var gridColumns = new List<WebGridColumn>();
            gridColumns.Add(grid.Column("ProjectName", Resources.Strings.Form, @<text>
            @if (item.TaskListStateId != Guid.Empty)
            {
                <a href="~/wizard/@item.ProjectGroupGuid.ToString()/?WorkflowId=@item.TaskListStateId.ToString()">@item.ProjectName - @item.StateName</a>
            }
            else
            {
                <a href="~/wizard/@item.ProjectGroupGuid.ToString()/?AnswerFileId=@item.AnswerFileId.ToString()">@item.ProjectName</a>
            }</text>));
            gridColumns.Add(grid.Column(null, null,@<text> @if (@item.AllowReassign || @item.AllowUnlock || @item.AllowCancellation || @item.TaskListStateId == Guid.Empty)
            {
                <div class="dropdown pull-right">
                    <button role="button" class="btn btn-default btn-xs" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="caret"></span>
                        <span class="sr-only">@Resources.Strings.ToggleActionDropdown</span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        @if (@item.AllowReassign)
                        {
                            <li role="presentation"><a role="menuitem" href="~/Home/Reassign/@item.TaskListStateId.ToString()">@Resources.Strings.Reassign</a></li>
                        }
                        else if (@item.AllowUnlock)
                        {
                            <li role="presentation"><a role="menuitem" href="~/Home?unlock=@item.TaskListStateId.ToString()">@Resources.Strings.Unlock</a></li>
                        }
                        @if (@item.AllowCancellation)
                        {
                            <li role="presentation"><a role="menuitem" href="~/Home/AbortForm/@item.TaskListStateId.ToString()" onclick="if (confirm('@Resources.Strings.ConfirmDelete')) {document.getElementById('actionForm').setAttribute('action',this.getAttribute('href'));document.getElementById('actionForm').submit();} return false;">@Resources.Strings.Delete</a></li>
                        }
                        @if (@item.TaskListStateId == Guid.Empty)
                        {
                            <li role="presentation"><a role="menuitem" href="~/Home/DeleteInProgress?id=@item.AnswerFileId.ToString()" onclick="if (confirm('@Resources.Strings.ConfirmDelete')) {document.getElementById('actionForm').setAttribute('action', this.getAttribute('href')); document.getElementById('actionForm').submit();} return false;">@Resources.Strings.Delete</a></li>
                        }
                    </ul>
                </div>
            }</text>));
            gridColumns.Add(grid.Column("AssignedBy", @Resources.Strings.AssignedBy, @<text>@Intelledox.Common.Functions.FormatDisplayName(@item.AssignedByName, @item.AssignedBy, false)</text>));
            gridColumns.Add(grid.Column("DateCreatedUtc", @Resources.Strings.DateAssigned, @<text>@Infiniti.MvcControllers.UserSettings.FormatLocalDate(@item.DateCreatedUtc, "g")</text>, "width:15%"));
            if (Model.ShowDueDateColumn)
            {
                gridColumns.Add(grid.Column("DateDueUtc", @Resources.Strings.DateDue, @<text>

            @if (@item.DateDueUtc != null)
            {
                @Infiniti.MvcControllers.UserSettings.FormatLocalDate(@item.DateDueUtc, "g", true)
            }</text>));
            }
            gridColumns.Add(grid.Column("Comment", @Resources.Strings.Comment, @<text>@item.Comment</text>));
        }

        @grid.Table(
                displayHeader: true,
                tableStyle: "table table-striped table-condensed",
                htmlAttributes: new { id = "grdTask" },
                fillEmptyRows: false,
                columns: grid.Columns(gridColumns.ToArray())
            )

        <div class="paginationList">
            @grid.PagerList(mode: WebGridPagerModes.Numeric | WebGridPagerModes.FirstLast,
            firstText: Resources.Strings.First,
            lastText: Resources.Strings.Last,
            paginationStyle: "pagination")
        </div>
    </div>
    <script type="text/javascript">
        if (getCookie('wfState') == "0" && $('#TaskListButton').length > 0) {
            $('#listProgress').slideToggle(0);
            $('#TaskListButton').prop("src", '@Url.Content("~/images/down.png")');
        }

        // SLIDE OUT Task List
        $(document).ready(function () {
            if ($('#TaskListButton').length > 0) {
                $('#TaskListButton').click(function () {
                    if ($('#listProgress').is(':hidden')) {
                        setCookie('wfState', "1", 1);
                        $('#TaskListButton').prop("src", '@Url.Content("~/images/up-dk.png")');
                    } else {
                        setCookie('wfState', "0", 1);
                        $('#TaskListButton').prop("src", '@Url.Content("~/images/down-dk.png")');}
                    $('#listProgress').slideToggle(300);
                });
            }
        });
    </script>
            }
