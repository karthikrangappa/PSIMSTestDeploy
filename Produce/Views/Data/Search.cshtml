@using Intelledox.Produce
@model Intelledox.Produce.DataSearchViewModel
@{
    var qid = Html.IdFor(Model.Question);
    var isDisabled = !Model.Question.IsEditable;
    var binaryType = Type.GetType("byte[]");
    var dataTableType = Type.GetType("System.Data.DataTable");
    Layout = null;
}
@if (String.IsNullOrEmpty(Model.ErrorMessage))
{ 
<table id="grdDataResults_@(qid)" class="dataResults table @(Model.Question.OnlyVisibleForTroubleshooting ? "datasource-debug" : "table-condensed")" data-SelectionField="@Model.SelectionField">
    <tr class="cell-heading">
        <th class="@(Model.Question.OnlyVisibleForTroubleshooting ? "datasource-debug" : "")">
            @if (Model.IsMultipleSelect && !isDisabled)
            {
                <input type="checkbox" checked="@Model.IsAllSelected" onclick="@Html.Raw(Model.LogInteractions ? "wiz.dataAnalyticsFocusAndBlur(" + @Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ", 'checkall'" + ");" : "")wiz.dataCheckAll(event)" />
            }
            else
            {
                @:&nbsp;
        }
        </th>
        @foreach (var col in Model.Results.Columns)
        {
            if (col.DataType != binaryType && col.DataType != dataTableType)
            {
                <th class="@(Model.Question.OnlyVisibleForTroubleshooting ? "datasource-debug" : "")">@col.DisplayName</th>
            }
        }
    </tr>
    @for (int y = 0; y < Model.Results.Count; y++)
    {
        var row = Model.Results[y];
        bool isSelected = (Model.SelectedIndices.Count == 0 || (Model.SelectedIndices.Count > 0 && Model.SelectedIndices.Contains(y.ToString())));

    <tr class="@Html.Raw(!Model.IsMultipleSelect && isSelected ? "active" : "") @(Model.Question.OnlyVisibleForTroubleshooting ? "datasource-debug" : "")">
        <td class="@(Model.Question.OnlyVisibleForTroubleshooting ? "datasource-debug" : "")">
   
            @if (Model.IsMultipleSelect)
            {
                <input type="checkbox" checked="@isSelected" disabled="@isDisabled" onclick="@Html.Raw(Model.LogInteractions ? (Model.Question.DatasourceQuestionModel.DisplayType == Intelledox.Model.QuestionDisplayType.Popup) ? "parent.wiz.dataAnalyticsFocusAndBlur(" + Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ");" : "wiz.dataAnalyticsFocusAndBlur(" + Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ");" : "")wiz.dataCheckItem(event, '@y')"/>
            }
            else
            {
                if (!isDisabled)
                {
                    <a href="#void" onclick="@Html.Raw(Model.LogInteractions ? (Model.Question.DatasourceQuestionModel.DisplayType == Intelledox.Model.QuestionDisplayType.Popup) ? "parent.wiz.dataAnalyticsFocusAndBlur(" + Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ");" : "wiz.dataAnalyticsFocusAndBlur(" + Microsoft.Security.Application.Encoder.JavaScriptEncode(Model.AnalyticsID) + ");" : "")wiz.dataSelectItem(event, '@y');return false;">@Resources.Strings.SelectString</a>
                }
            }

        </td>
        @for (int x = 0; x < Model.Results.Columns.Count; x++)
        {
            if (Model.Results.Columns[x].DataType != binaryType && Model.Results.Columns[x].DataType != dataTableType)
            {
            <td class="@(Model.Question.OnlyVisibleForTroubleshooting ? "datasource-debug" : "")">@row[x].ToString()</td>
            }
        }
    </tr>
    }
</table>
}
else
{ 
    @Model.ErrorMessage;
}

@if (Model.IsResettingSelection)
{
    <script type="text/javascript">document.getElementById('@Model.SelectionField').value = '@Model.ResetSelectionValue';</script>
}
@if (Model.IsScrollToView)
{
    <script type="text/javascript">wiz.dataScrollToView('grdDataResults_@(qid)', '@(qid)_results');</script>
}